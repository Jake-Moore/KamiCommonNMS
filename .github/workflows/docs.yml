name: Generate and Deploy Javadocs

on:
  push:
    branches: [ main ]

jobs:
  docs:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2
        with:
          gradle-version: '9.0.0'

      - name: Generate Javadocs
        run: gradle :core:aggregateJavadoc

      - name: Extract Version from Gradle
        id: version
        run: |
          gradle clean
          version=$(gradle properties -q | grep "^version:" | awk '{print $2}')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Display Version
        run: echo "Version is ${{ steps.extract_version.outputs.version }}"

      - name: Checkout gh-pages
        if: "!endsWith(steps.version.outputs.version, 'SNAPSHOT')"
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy versioned docs
        if: "!endsWith(steps.version.outputs.version, 'SNAPSHOT')"
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Deploying docs for version: $VERSION"
          
          cd gh-pages
          
          # Delete existing version folder if it exists
          rm -rf "$VERSION"
          
          # Create version directory
          mkdir -p "$VERSION"
          
          # Copy new docs to version folder
          cp -r ../core/build/docs/aggregateJavadoc/* "$VERSION"/
          
          # Update or create 'latest' to point to this version
          rm -rf latest
          cp -r "$VERSION" latest
          
          echo "Created version folder: $VERSION"
          echo "Updated latest to point to: $VERSION"

      - name: Generate versions.json
        if: "!endsWith(steps.version.outputs.version, 'SNAPSHOT')"
        run: |
          cd gh-pages
          
          # Get all version directories (excluding 'latest')
          VERSIONS=$(find . -maxdepth 1 -type d -name "*.*.*" -o -name "v*" | sed 's|./||' | grep -v '^latest$' | sort -V -r)
          
          echo "Found versions: $VERSIONS"
          
          # Generate versions.json
          echo "{" > versions.json
          echo '  "versions": [' >> versions.json
          first=true
          for version in $VERSIONS; do
            if [ "$first" = true ]; then
              first=false
            else
              echo ',' >> versions.json
            fi
            echo -n "    \"$version\"" >> versions.json
          done
          echo "" >> versions.json
          echo '  ],' >> versions.json
          echo "  \"latest\": \"${{ steps.version.outputs.version }}\"" >> versions.json
          echo '}' >> versions.json
          
          echo "Generated versions.json:"
          cat versions.json

      - name: Generate index.html
        if: "!endsWith(steps.version.outputs.version, 'SNAPSHOT')"
        run: |
          cd gh-pages
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>KamiCommon NMS API Documentation</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; 
                      margin: 0; 
                      padding: 40px 20px;
                      background: #f8f9fa;
                      color: #333;
                  }
                  .container { 
                      max-width: 800px; 
                      margin: 0 auto; 
                      background: white;
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  h1 { 
                      color: #2c3e50; 
                      border-bottom: 2px solid #3498db; 
                      padding-bottom: 10px;
                  }
                  .version-link { 
                      display: block; 
                      padding: 15px 20px; 
                      margin: 8px 0; 
                      background: #f8f9fa; 
                      text-decoration: none; 
                      border-radius: 6px; 
                      border: 1px solid #e9ecef;
                      color: #495057;
                      transition: all 0.2s;
                  }
                  .version-link:hover { 
                      background: #e9ecef; 
                      transform: translateY(-1px);
                      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                  }
                  .latest { 
                      background: linear-gradient(135deg, #28a745, #20c997); 
                      color: white; 
                      font-weight: bold;
                      border-color: #28a745;
                  }
                  .latest:hover {
                      background: linear-gradient(135deg, #218838, #1ea085);
                  }
                  .loading {
                      text-align: center;
                      color: #6c757d;
                      font-style: italic;
                  }
                  .updated {
                      color: #6c757d;
                      font-size: 0.9em;
                      text-align: center;
                      margin-top: 30px;
                      padding-top: 20px;
                      border-top: 1px solid #e9ecef;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>ðŸš€ KamiCommon NMS API Documentation</h1>
          
                  <p>Welcome to the KamiCommon NMS API documentation. Choose a version below to browse the API documentation.</p>
          
                  <h2>ðŸ“š Latest Version</h2>
                  <a href="latest/" class="version-link latest">Latest (Recommended)</a>
          
                  <h2>ðŸ“‹ All Versions</h2>
                  <div id="versions" class="loading">Loading available versions...</div>
          
                  <div class="updated">
                      Last updated: <span id="lastUpdated"></span>
                  </div>
              </div>
          
              <script>
              // Set last updated time
              document.getElementById('lastUpdated').textContent = new Date().toLocaleString();
          
              // Load versions
              fetch('versions.json')
                  .then(response => {
                      if (!response.ok) throw new Error('Failed to load versions');
                      return response.json();
                  })
                  .then(data => {
                      const container = document.getElementById('versions');
                      container.innerHTML = '';
                      container.classList.remove('loading');
          
                      if (data.versions && data.versions.length > 0) {
                          data.versions.forEach(version => {
                              const link = document.createElement('a');
                              link.href = version + '/';
                              link.textContent = `Version ${version}`;
                              link.className = 'version-link';
                              container.appendChild(link);
                          });
                      } else {
                          container.innerHTML = '<p>No versions available yet.</p>';
                      }
                  })
                  .catch(error => {
                      console.error('Error loading versions:', error);
                      document.getElementById('versions').innerHTML = 
                          '<p style="color: #dc3545;">Error loading versions. Please refresh the page.</p>';
                  });
              </script>
          </body>
          </html>
          EOF
          
          echo "Generated index.html"

      - name: Commit and push
        if: "!endsWith(steps.version.outputs.version, 'SNAPSHOT')"
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ“š Deploy docs for v${{ steps.version.outputs.version }} - $(date)"
            git push
            echo "âœ… Documentation deployed successfully!"
          fi