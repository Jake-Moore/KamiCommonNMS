# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Gradle Publish & Deploy Docs (on push)

on:
  push:
    branches: [ "main" ]

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      paperVersion: ${{ steps.extract_version.outputs.paperVersion }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      # Configure: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
        with:
          gradle-version: '9.0.0'

      - name: Build with Gradle (1.8.8)
        run: gradle build
        env:
          LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
          LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}
          MC_SERVER_NEWEST_API: "false"

      - name: Build with Gradle (Latest Paper 1.21+)
        run: gradle build
        env:
          LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
          LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}
          MC_SERVER_NEWEST_API: "true"

      - name: Extract Version from Gradle
        id: extract_version
        run: |
          gradle clean
          version=$(gradle properties -q | grep "^version:" | awk '{print $2}')
          echo "version=$version" >> $GITHUB_OUTPUT
          paperVersion=$(gradle printPaperVersion -q | tr -d '[:space:]')
          echo "paperVersion=$paperVersion" >> $GITHUB_OUTPUT

      - name: Display Version
        run: |
          echo "Version is ${{ steps.extract_version.outputs.version }}"
          echo "Paper Version is ${{ steps.extract_version.outputs.paperVersion }}"

  build:
    needs: validate
    # Run only on non snapshot versions
    if: "!endsWith(needs.validate.outputs.version, 'SNAPSHOT')"
    runs-on: ubuntu-latest
    permissions:
      contents: write # Access to Publish a Release
      packages: write # Access to Publish a Package

    steps:
    - uses: actions/checkout@v5
    
    - name: Set up JDK 21
      uses: actions/setup-java@v5
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

      # Configure: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
      with:
        gradle-version: '9.0.0'

    - name: Publish with Gradle
      run: gradle publish
      env:
        LUXIOUS_NEXUS_USER: ${{ secrets.MAVEN_NAME }}
        LUXIOUS_NEXUS_PASS: ${{ secrets.MAVEN_SECRET }}

      #--------------------------------------------------------------------------------------------
      #           Update Version Badge
      #--------------------------------------------------------------------------------------------

      # Update the README.md Badge with the new version
    - name: Create Version Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 25b97e226e0ecf38e0135223111fd115
        filename: version.json
        label: Latest Release
        message: "${{ needs.validate.outputs.version }}"
        color: blue

      # Update the README.md Badge with the new paper version
    - name: Create Paper NMS Version Badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 25b97e226e0ecf38e0135223111fd115
        filename: paperVersion.json
        label: Last NMS Update
        message: "${{ needs.validate.outputs.paperVersion }}"
        color: orange

  docs:
    needs: validate
    # Run only on non snapshot versions
    if: "!endsWith(needs.validate.outputs.version, 'SNAPSHOT')"
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Allow reading repo contents and writing (for push)
      pages: write         # Allow writing to GitHub Pages
      id-token: write      # Allow OIDC token for authentication

    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@748248ddd2a24f49513d8f472f81c3a07d4d50e1 # v4.4.4
        with:
          gradle-version: '9.0.0'

      - name: Generate Javadocs
        run: gradle :core:aggregateJavadoc

      - name: Checkout gh-pages
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy versioned docs
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "Deploying docs for version: $VERSION"

          cd gh-pages

          # Delete existing version folder if it exists
          rm -rf "$VERSION"

          # Create version directory
          mkdir -p "$VERSION"

          # Copy new docs to version folder
          cp -r ../core/build/docs/aggregateJavadoc/* "$VERSION"/

          # Update or create 'latest' to point to this version
          rm -rf latest
          cp -r "$VERSION" latest

          echo "Created version folder: $VERSION"
          echo "Updated latest to point to: $VERSION"

      - name: Generate versions.json
        run: |
          cd gh-pages

          # Get all version directories (excluding 'latest' and any files)
          VERSIONS=$(find . -maxdepth 1 -type d \( -name "*.*.*" -o -name "v*" \) | sed 's|./||' | grep -v '^latest$' | grep -v '^\.$' | sort -V -r)

          echo "Found versions: $VERSIONS"

          # Generate versions.json
          echo "{" > versions.json
          echo '  "versions": [' >> versions.json
          first=true
          for version in $VERSIONS; do
            if [ "$first" = true ]; then
              first=false
            else
              echo ',' >> versions.json
            fi
            echo -n "    \"$version\"" >> versions.json
          done
          echo "" >> versions.json
          echo '  ],' >> versions.json
          echo "  \"latest\": \"${{ needs.validate.outputs.version }}\"" >> versions.json
          echo '}' >> versions.json

          echo "Generated versions.json:"
          cat versions.json

      - name: Generate index.html
        run: |
          cd gh-pages

          # Download the HTML template
          curl -s https://raw.githubusercontent.com/Jake-Moore/Jake-Moore.github.io/refs/heads/main/templates/index-template.html -o template.html

          # Create the dynamic content section in a separate file
          cat > dynamic_content.html << 'EOF'
          <h2>ðŸ“š Latest Version</h2>
          <a href="latest/" class="version-link latest">Latest (Recommended)</a>

          <h2>ðŸ“‹ All Versions</h2>
          <div id="versions" class="loading">Loading available versions...</div>

          <script>
          // Load versions
          fetch("versions.json")
              .then(response => {
                  if (!response.ok) throw new Error("Failed to load versions");
                  return response.json();
              })
              .then(data => {
                  const container = document.getElementById("versions");
                  container.innerHTML = "";
                  container.classList.remove("loading");

                  if (data.versions && data.versions.length > 0) {
                      data.versions.forEach(version => {
                          const link = document.createElement("a");
                          link.href = version + "/";
                          link.textContent = `Version ${version}`;
                          link.className = "version-link";
                          container.appendChild(link);
                      });
                  } else {
                      container.innerHTML = "<p>No versions available yet.</p>";
                  }
              })
              .catch(error => {
                  console.error("Error loading versions:", error);
                  document.getElementById("versions").innerHTML = 
                      "<p style=\"color: #dc3545;\">Error loading versions. Please refresh the page.</p>";
              });
          </script>
          EOF

          # Replace placeholders in the template
          sed "s|{{PAGE_TITLE}}|KamiCommon NMS Javadocs|g" template.html | \
          sed "s|{{PAGE_HEADING}}|ðŸš€ KamiCommon NMS Javadocs|g" | \
          sed "s|{{PAGE_DESCRIPTION}}|Welcome to the KamiCommon NMS API documentation. Choose a version below to browse its Javadocs.|g" | \
          sed "s|{{GITHUB_PATH}}|/Jake-Moore/KamiCommonNMS|g" > temp_index.html

          # Replace the dynamic content placeholder
          awk '
          /{{DYNAMIC_CONTENT}}/ {
              while ((getline line < "dynamic_content.html") > 0) {
                  print line
              }
              close("dynamic_content.html")
              next
          }
          { print }
          ' temp_index.html > index.html

          # Clean up
          rm template.html temp_index.html dynamic_content.html

          echo "Generated index.html"

      - name: Commit and push
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ“š Deploy docs for v${{ needs.validate.outputs.version }} - $(date)"
            git push
            echo "âœ… Documentation deployed successfully!"
          fi